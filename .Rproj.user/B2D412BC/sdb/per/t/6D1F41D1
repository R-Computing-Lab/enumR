{
    "collab_server" : "",
    "contents" : "\nlibrary(corrplot)\nlibrary(ggplot2);library(ggExtra)\nlibrary(Hmisc)\nlibrary(knitr)\nlibrary(lubridate)\nlibrary(MplusAutomation);library(matrixStats)\nlibrary(NlsyLinks)\nlibrary(OpenMx)\nlibrary(plyr);library(psych)\nlibrary(stargazer)\nlibrary(tables)\nlibrary(xtable)\nlibrary(beepr)\n#\n####### Data Organization\n# File Structure\nfile_drive= \"C:\"\n#file_drive=\"E:\"\ndirectory = paste0(file_drive,\"/Dropbox/Lab/Research/Projects/Current/FA Project\")\ncontent_folder = paste0(directory,\"/Common/content\")\ndata_folder = paste0(content_folder,\"/data\")\nmplus_folder = paste0(content_folder,\"/analyses/mplus\")\nr_folder = paste0(content_folder,\"/analyses/r/\")\ntables_folder = paste0(content_folder,\"/tables\")\nslides_folder = paste0(content_folder,\"/slides\")\nwriting_folder = paste0(content_folder,\"/writing\")\n\n# Functions\nsource(paste0(r_folder,\"MasonHelperFunctions.R\"))\n\n\n###################### Simulation Code #############\nlibrary(psych)\nlibrary(GPArotation)\nlibrary(GAIPE)\nset.seed(1234)\n\n# Simulation Prep\nsimulation<-1000\n\n## Loadings\nLoadings<-c(.3,.5,.7,.8)\n\n## Correlated Factors\nFactorCor<-c(0,.05,.1,.15,.3)\n\n## Sample Size\nsamplesize<-c(#50,\n  100,250,500,1000)\n\n## Estimation\nmethod<-c(\"minres\",\"wls\",\"gls\",\"pa\",\"ml\",\"minchi\")\n\n## Number of factors to extract\nnfactors<-c(1:9)\n\n## Results\nmega<-data.frame(matrix(rep(0,56),nrow=1))\nnames(mega)<-c( \"dof\",\"chisq\",\"prob\",\"sqresid\",\"fit\", \"RMSEA\",\"RMSEA_lower\",\"RMSEA_upper\",\"BIC\",\"SABIC\",\"null.model\",\"null.dof\",\"null.chisq\",\"complex\",\"eChisq\",\"SRMR\",\"eCRMS\",\"eBIC\",\"TLI\",\"fa.fit\",\"fa.fit.off\",\"objective\",\"ENull\",\"eSABIC\",\"null.chisq1\" , \"TLI.m\",\"NFI.m\",\"CFI.m\",\"RMSEA_lower.m\",\"RMSEA_upper.m\",\"eRMS\",\"cfit.1\",\"cfit.2\",\"cfit.3\",\"cfit.4\",\"cfit.5\",\"cfit.6\",\"cfit.7\",\"cfit.8\",\"cfit.9\",\"cresidual.1\",\"cresidual.2\",\"cresidual.3\",\"cresidual.4\",\"cresidual.5\",\"cresidual.6\",\"cresidual.7\",\"cresidual.8\",\"cresidual.9\",\"map.values\",\"r\",\"samplesize\",\"loadings\",\"dataset\",\"error\",\"factor\")\nmega_null<-mega\nmega_null$error<- 1\n\n# Functions\n## Generate Data from factor loadings\n### Adapted from http://personality-project.org/r/r.datageneration.html\nGenData = function(fmodel,effect,n,names) {   # define a general function in terms of a factor model and an effects matrix\n  numberofvariables = dim(fmodel)[1]        #problem size determined by input to the function\n  numberoflatent = dim(fmodel)[2]\n  tmodel = t(fmodel)      #transpose of model\n  communality=diag(fmodel%*%tmodel)       #find how much to weight true scores and errors given the measurement model\n  uniqueness=1-communality\n  errorweight=diag(sqrt(uniqueness))      #how much to weight the errors\n\n  latentscores = matrix(rnorm(n*(numberoflatent)),n) #create true scores for the latent variables\n  latentscores = latentscores%*%effect\n  truescores = latentscores%*%tmodel\n  error = matrix(rnorm(n*(numberofvariables)),n)  #create normal error scores\n  error = error%*%errorweight\n  observedscore = truescores+error\n  observedscore = data.frame(observedscore)\n  names(observedscore)<-names\n  return(observedscore) }       #end of function mes\n## FA VSS extraction\n\nvss.fixed<-function(x, n = 8, rotate = \"oblimin\", diagonal = FALSE, fm = \"ml\",n.obs=NULL,title=\"Very Simple Structure\",use=\"pairwise\",cor=\"cov\",...){\n  cl <- match.call()\n  if (rotate == \"oblimin\") {\n    if (!requireNamespace(\"GPArotation\")) {\n      stop(\"You must have GPArotation installed to use oblimin rotation\")\n    }\n  }\n  require(psych)\n  require(GAIPE)\n  old_rotate = rotate\n  complexrow <- function(x, c) {\n    n = length(x)\n    temp <- x\n    x <- rep(0, n)\n    for (j in 1:c) {\n      locmax <- which.max(abs(temp))\n      x[locmax] <- sign(temp[locmax]) * max(abs(temp))\n      temp[locmax] <- 0\n    }\n    return(x)\n  }\n  complexmat <- function(x, c) {\n    nrows <- dim(x)[1]\n    ncols <- dim(x)[2]\n    for (i in 1:nrows) {\n      x[i, ] <- complexrow(x[i, ], c)\n    }\n    return(x)\n  }\n  map <- function(x, n) {\n    nvar <- dim(x)[2]\n    min.partial <- rep(NA, n)\n    e <- eigen(x)\n    evect <- e$vectors\n    comp <- evect %*% diag(sqrt(e$values))\n    if (n >= nvar) {\n      n1 <- nvar - 1\n    } else {\n      n1 <- n\n    }\n    for (i in 1:n1) {\n      c11.star <- x - comp[, 1:i] %*% t(comp[, 1:i])\n      d <- diag(1/sqrt(diag(c11.star)))\n      rstar <- d %*% c11.star %*% d\n      diag(rstar) <- 0\n      min.partial[i] <- sum(rstar * rstar)/(nvar * (nvar -1))\n    }\n    return(min.partial)\n  }\n  if (dim(x)[2] < n)\n    n <- dim(x)[2]\n  complexfit <- array(0, dim = c(n, n))\n  complexresid <- array(0, dim = c(n, n))\n  vss.df <- data.frame(dof = rep(0, n), chisq = NA, prob = NA,sqresid = NA, fit = NA, RMSEA = NA,RMSEA_lower=NA,RMSEA_upper=NA, BIC = NA, SABIC = NA, null.model = NA, null.dof = NA, null.chisq = NA,complex = NA, eChisq = NA, SRMR = NA, eCRMS = NA, eBIC = NA, TLI=NA,fa.fit=NA,fa.fit.off=NA, objective=NA,ENull=NA,eSABIC=NA,null.chisq1=NA,TLI.m=NA, NFI.m=NA, CFI.m=NA,RMSEA_lower.m=NA,RMSEA_upper.m=NA)\n\n    if (!is.matrix(x))\n      x <- as.matrix(x)\n\n  if (is.null(n.obs)) {\n    message(\"n.obs was not specified and was arbitrarily set to 1000.  This only affects the chi square values.\")\n    n.obs <- 1000}\n\n  map.values <- map(x, n)\n  if (n > dim(x)[2]) {\n    n <- dim(x)[2]}\n\n  for (i in 1:n) {\n    PHI <- diag(i)\n    if (i < 2) {\n      (rotate = \"none\")\n    }\n    else {\n      rotate = old_rotate\n    }\n\n      f <- fa(x, i, rotate = rotate, n.obs = n.obs, warnings = FALSE,\n              fm = fm, scores = \"none\", cor = cor, ...)\n      if (i == 1) {\n        original <- x\n        sqoriginal <- original * original\n        totaloriginal <- sum(sqoriginal) - diagonal *\n          sum(diag(sqoriginal))\n      }\n\n    load <- as.matrix(f$loadings)\n    model <- load %*% PHI %*% t(load)\n    residual <- original - model\n    sqresid <- residual * residual\n    totalresid <- sum(sqresid) - diagonal * sum(diag(sqresid))\n    fit <- 1 - totalresid/totaloriginal\n\n      vss.df[i, \"dof\"] <- f$dof\n      vss.df[i, \"chisq\"] <- f$STATISTIC\n      vss.df[i, \"prob\"] <- f$PVAL\n      vss.df[i, \"eChisq\"] <- f$chi\n      vss.df[i, \"ENull\"] <- f$ENull\n      vss.df[i, \"SRMR\"] <- f$rms\n      vss.df[i, \"eRMS\"] <- f$rms\n      vss.df[i, \"eCRMS\"] <- f$crms\n      vss.df[i, \"eBIC\"] <- f$EBIC\n\t  vss.df[i, \"eSABIC\"] <- f$ESABIC\n\n      vss.df[i,\"TLI\"]<-f$TLI\n\t  vss.df[i,\"TLI.m\"]<-(f$null.chisq/f$null.dof - f$STATISTIC/f$dof)/(f$null.chisq/f$null.dof - 1)\n\n\t  vss.df[i,\"NFI.m\"]<-(f$null.chisq - f$STATISTIC)/(f$null.chisq)\n\n\t  vss.df[i,\"CFI.m\"]<-(f$null.chisq-f$null.dof - f$STATISTIC-f$dof)/(f$null.chisq-f$null.dof)\n\n\t  vss.df[i,\"CFI.m\"]<-(f$null.chisq-f$null.dof - f$STATISTIC-f$dof)/(f$null.chisq-f$null.dof)\n\n      vss.df[i,\"null.model\"] = f$null.model\n      vss.df[i,\"null.dof\"] = f$null.dof\n\n\t  vss.df[i,\"fa.fit\"] = f$fit\n\t  vss.df[i,\"fa.fit.off\"] = f$fit.off\n\t  vss.df[i,\"objective\"] = f$objective\n      if (!is.null(f$chisq)) {\n        vss.df[i,\"null.chisq1\"] = f$chisq\n\t\tvss.df[i,\"null.chisq\"] = f$null.chisq\n      }\n      if (!is.null(f$RMSEA[1])) {\n        vss.df[i, \"RMSEA\"] <- f$RMSEA[1]\n        vss.df[i, \"RMSEA_upper\"] <- f$RMSEA[3]\n        vss.df[i, \"RMSEA_lower\"] <- f$RMSEA[2]\n\n\t\tRMSEA.m<-CI.RMSEA(f$RMSEA[1],N=n.obs,df=f$dof,clevel=1-f$RMSEA[4])\n\n        vss.df[i, \"RMSEA_upper.m\"] <- RMSEA.m$Upper.CI\n        vss.df[i, \"RMSEA_lower.m\"] <- RMSEA.m$Lower.CI\n\n      }\n      else {\n        vss.df[i, \"RMSEA\"] <- NA\n      }\n\n      if (!is.null(f$BIC)) {\n        vss.df[i, \"BIC\"] <- f$BIC\n      }\n      else {\n        vss.df[i, \"BIC\"] <- NA\n      }\n      if (!is.null(f$SABIC)) {\n        vss.df[i, \"SABIC\"] <- f$SABIC\n      }\n      else {\n        vss.df[i, \"SABIC\"] <- NA\n      }\n      if (!is.null(f$complexity)) {\n        vss.df[i, \"complex\"] <- mean(f$complexity)\n      }\n      else {\n        vss.df[i, \"complex\"] <- NA\n      }\n\n    vss.df[i, \"sqresid\"] <- totalresid\n    vss.df[i, \"fit\"] <- fit\n    for (c in 1:i) {\n      simpleload <- complexmat(load, c)\n      model <- simpleload %*% PHI %*% t(simpleload)\n      residual <- original - model\n      sqresid <- residual * residual\n      totalsimple <- sum(sqresid) - diagonal * sum(diag(sqresid))\n      simplefit <- 1 - totalsimple/totaloriginal\n      complexresid[i, c] <- totalsimple\n      complexfit[i, c] <- simplefit\n    }\n  }\n  vss.stats <- data.frame(vss.df, cfit = complexfit, cresidual = complexresid,map.values)\n\n  #class(vss.results) <- c(\"psych\", \"vss\")\n  return(vss.stats)\n  #return(f)\n}\n\n## Factor Structure\tfor any given correlation\n### 5 Factors\n####\t\t\t\t\tE\tA\tC\tN\tO\nData_Structure_5 = function(r=0) {\nStructure =matrix(c (1,r,r,r,r,\n                    r,1,r,r,r,\n                    r,r,1,r,r,\n\t\t\t\t\tr,r,r,1,r,\n\t\t\t\t\tr,r,r,r,1),\n\t\t\t\t\tnrow=5,byrow=TRUE)\nreturn(Structure)\n}\n\n## Loading Matrix for given test structure\n\n### BFI Functions\n#### 5 factors, uncorrelated\n#### 44 items\n####\n#### Generate BFI like loading matrix for any given magnitude\nBFI_Data_Loadings = function(l=.7) { # Generate Factor Loadings for BFI like data\n#\t\t\t\t\tE\tA\tC\tN\tO\nLoadings = matrix(c(l, \t0, \t0,\t0, \t0,\n                    -l,\t0, \t0,\t0, \t0,\n\t\t\t\t\tl, \t0, \t0,\t0, \t0,\n\t\t\t\t\tl, \t0, \t0,\t0, \t0,\n\t\t\t\t\t-l,\t0, \t0,\t0, \t0,\n\t\t\t\t\tl, \t0, \t0,\t0, \t0,\n           -l, \t0, \t0,\t0, \t0,\n\t\t\t\t\tl, \t0, \t0,\t0, \t0,\n           0, \t-l, 0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \t-l,\t0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \t-l, 0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \t-l,\t0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \t0,\tl,\t0,\t0,\n\t\t\t\t\t0, \t0,\t-l,\t0,\t0,\n\t\t\t\t\t0, \t0,\tl,\t0,\t0,\n\t\t\t\t\t0, \t0,\t-l,\t0,\t0,\n\t\t\t\t\t0, \t0,\t-l,\t0,\t0,\n\t\t\t\t\t0, \t0,\tl,\t0,\t0,\n\t\t\t\t\t0, \t0,\tl,\t0,\t0,\n\t\t\t\t\t0, \t0,\tl,\t0,\t0,\n\t\t\t\t\t0, \t0,\t-l,\t0,\t0,\n\t\t\t\t\t0, \t0,\t0,\tl,\t0,\n\t\t\t\t\t0, \t0,\t0,\t-l,\t0,\n\t\t\t\t\t0, \t0,\t0,\tl,\t0,\n\t\t\t\t\t0, \t0,\t0,\tl,\t0,\n\t\t\t\t\t0, \t0,\t0,\t-l,\t0,\n\t\t\t\t\t0, \t0,\t0,\tl,\t0,\n\t\t\t\t\t0, \t0,\t0,\t-l,\t0,\n\t\t\t\t\t0, \t0,\t0,\tl,\t0,\n\t\t\t\t\t0, \t0,\t0,\t0,\tl,\n\t\t\t\t\t0, \t0,\t0,\t0,\tl,\n\t\t\t\t\t0, \t0,\t0,\t0,\tl,\n\t\t\t\t\t0, \t0,\t0,\t0,\tl,\n\t\t\t\t\t0, \t0,\t0,\t0,\tl,\n\t\t\t\t\t0, \t0,\t0,\t0,\tl,\n\t\t\t\t\t0, \t0,\t0,\t0,\t-l,\n\t\t\t\t\t0, \t0,\t0,\t0,\tl,\n\t\t\t\t\t0, \t0,\t0,\t0,\t-l,\n\t\t\t\t\t0, \t0,\t0,\t0,\tl\n\t\t\t\t\t),\n                 ncol=5,byrow=TRUE)\nreturn(Loadings)\n}\n\n\n#### Names\nBFI_names<-c('E1',\n         'E2R',\n         'E3',\n         'E4',\n         'E5R',\n         'E6',\n         'E7R',\n         'E8',\n         'A1R',\n         'A2',\n         'A3R',\n         'A4',\n         'A5',\n         'A6R',\n         'A7',\n         'A8R',\n         'A9',\n         'C1',\n         'C2R',\n         'C3',\n         'C4R',\n         'C5R',\n         'C6',\n         'C7',\n         'C8',\n         'C9R',\n         'N1',\n         'N2R',\n         'N3',\n         'N4',\n         'N5R',\n         'N6',\n         'N7R',\n         'N8',\n         'O1',\n         'O2',\n         'O3',\n         'O4',\n         'O5',\n         'O6',\n         'O7R',\n         'O8',\n\t\t 'O9R',\n\t\t 'O10'\n\t\t )\n\n### IPIP\n#### 5 factors, uncorrelated\n#### 50 items\n####\n#### Generate BFI like loading matrix for any given magnitude\nIPIP_50_Data_Loadings = function(l=.7) { # Generate Factor Loadings for IPIP , 50 items like data\n#\t\t\t\t\tE\tA\tC\tN\tO\n##\n##\t\t\t\t\t5+5\nLoadings = matrix(c(l, \t0, \t0,\t0, \t0,\n                    l,\t0, \t0,\t0, \t0,\n\t\t\t\t\tl, \t0, \t0,\t0, \t0,\n\t\t\t\t\tl, \t0, \t0,\t0, \t0,\n\t\t\t\t\tl,\t0, \t0,\t0, \t0,\n\t\t\t\t\t-l, 0, \t0,\t0, \t0,\n                    -l,\t0, \t0,\t0, \t0,\n\t\t\t\t\t-l, 0, \t0,\t0, \t0,\n\t\t\t\t\t-l, 0, \t0,\t0, \t0,\n\t\t\t\t\t-l,\t0, \t0,\t0, \t0,\n##\n##\t\t\t\t\t\t6+4\n                    0, \tl, 0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \tl, 0,\t0, \t0,\n\t\t\t\t\t0, \t-l,\t0,\t0, \t0,\n\t\t\t\t\t0, \t-l,\t0,\t0, \t0,\n\t\t\t\t\t0, \t-l,\t0,\t0, \t0,\n\t\t\t\t\t0, \t-l,\t0,\t0, \t0,\n##\n##\t\t\t\t\t\t\t6+4\n                    0,\t0, \tl,\t0,\t0,\n                    0,\t0, \tl,\t0,\t0,\n                    0,\t0, \tl,\t0,\t0,\n                    0,\t0, \tl,\t0,\t0,\n                    0,\t0, \tl,\t0,\t0,\n                    0,\t0, \tl,\t0,\t0,\n                    0,\t0, \t-l,\t0,\t0,\n                    0,\t0, \t-l,\t0,\t0,\n                    0,\t0, \t-l,\t0,\t0,\n                    0,\t0, \t-l,\t0,\t0,\n##\n##\t\t\t\t\t\t\t\t2+8\n                \t0,\t0,\t0, \tl,\t0,\n                 \t0,\t0,\t0, \tl,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n                 \t0,\t0,\t0, \t-l,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n##\n##\t\t\t\t\t\t\t\t\t7+3\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \t-l,\n                \t0,\t0,  0,\t0, \t-l,\n                \t0,\t0,  0,\t0, \t-l\n\n\t\t\t\t\t),\n                 ncol=5,byrow=TRUE)\nreturn(Loadings)\n}\n\n\n#### Names\nIPIP_50_names<-c('E1',\n         'E2',\n         'E3',\n         'E4',\n         'E5',\n         'E6R',\n         'E7R',\n         'E8R',\n\t\t 'E9R',\n         'E10R',\n         'A1',\n         'A2',\n         'A3',\n         'A4',\n         'A5',\n         'A6',\n         'A7R',\n         'A8R',\n         'A9R',\n         'A10R',\n         'C1',\n         'C2',\n         'C3',\n         'C4',\n         'C5',\n         'C6',\n         'C7R',\n         'C8R',\n         'C9R',\n\t\t 'C10R',\n         'N1',\n         'N2',\n         'N3R',\n         'N4R',\n         'N5R',\n         'N6R',\n         'N7R',\n         'N8R',\n\t\t 'N9R',\n\t\t 'N10R',\n         'O1',\n         'O2',\n         'O3',\n         'O4',\n         'O5',\n         'O6',\n         'O7',\n         'O8R',\n\t\t 'O9R',\n\t\t 'O10R'\n\t\t )\n\n\n#### 5 factors, uncorrelated\n#### 100 items\n####\n#### Generate IPIP like loading matrix for any given magnitude\nIPIP_100_Data_Loadings = function(l=.7) { # Generate Factor Loadings for IPIP , 100 items like data\n#\t\t\t\t\tE\tA\tC\tN\tO\n##\n##\t\t\t\t\t10+10\nLoadings = matrix(c(l, \t0, \t0,\t0, \t0,\n                    l,\t0, \t0,\t0, \t0,\n\t\t\t\t\tl, \t0, \t0,\t0, \t0,\n\t\t\t\t\tl, \t0, \t0,\t0, \t0,\n\t\t\t\t\tl,\t0, \t0,\t0, \t0,\n\t\t\t\t\tl, \t0, \t0,\t0, \t0,\n                    l,\t0, \t0,\t0, \t0,\n\t\t\t\t\tl, \t0, \t0,\t0, \t0,\n\t\t\t\t\tl, \t0, \t0,\t0, \t0,\n\t\t\t\t\tl,\t0, \t0,\t0, \t0,\n\t\t\t\t\t-l, 0, \t0,\t0, \t0,\n                    -l,\t0, \t0,\t0, \t0,\n\t\t\t\t\t-l, 0, \t0,\t0, \t0,\n\t\t\t\t\t-l, 0, \t0,\t0, \t0,\n\t\t\t\t\t-l,\t0, \t0,\t0, \t0,\n\t\t\t\t\t-l, 0, \t0,\t0, \t0,\n                    -l,\t0, \t0,\t0, \t0,\n\t\t\t\t\t-l, 0, \t0,\t0, \t0,\n\t\t\t\t\t-l, 0, \t0,\t0, \t0,\n\t\t\t\t\t-l,\t0, \t0,\t0, \t0,\n##\n##\t\t\t\t\t\t14+6\n                    0, \tl, 0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n                    0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \tl,\t0,\t0, \t0,\n\t\t\t\t\t0, \t-l,\t0,\t0, \t0,\n\t\t\t\t\t0, \t-l,\t0,\t0, \t0,\n\t\t\t\t\t0, \t-l,\t0,\t0, \t0,\n\t\t\t\t\t0, \t-l,\t0,\t0, \t0,\n\t\t\t\t\t0, \t-l,\t0,\t0, \t0,\n\t\t\t\t\t0, \t-l,\t0,\t0, \t0,\n##\n##\t\t\t\t\t\t\t11+9\n                    0,\t0, \tl,\t0,\t0,\n                    0,\t0, \tl,\t0,\t0,\n                    0,\t0, \tl,\t0,\t0,\n                    0,\t0, \tl,\t0,\t0,\n                    0,\t0, \tl,\t0,\t0,\n                    0,\t0, \tl,\t0,\t0,\n                    0,\t0, \tl,\t0,\t0,\n                    0,\t0, \tl,\t0,\t0,\n                    0,\t0, \tl,\t0,\t0,\n                    0,\t0, \tl,\t0,\t0,\n                    0,\t0, \tl,\t0,\t0,\n                    0,\t0, \t-l,\t0,\t0,\n                    0,\t0, \t-l,\t0,\t0,\n                    0,\t0, \t-l,\t0,\t0,\n                    0,\t0, \t-l,\t0,\t0,\n                    0,\t0, \t-l,\t0,\t0,\n                    0,\t0, \t-l,\t0,\t0,\n                    0,\t0, \t-l,\t0,\t0,\n                    0,\t0, \t-l,\t0,\t0,\n                    0,\t0, \t-l,\t0,\t0,\n##\n##\t\t\t\t\t\t\t\t5+15\n                \t0,\t0,\t0, \tl,\t0,\n                 \t0,\t0,\t0, \tl,\t0,\n\t\t\t\t\t0,\t0,\t0, \tl,\t0,\n                 \t0,\t0,\t0, \tl,\t0,\n\t\t\t\t\t0,\t0,\t0, \tl,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n                 \t0,\t0,\t0, \t-l,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n\t\t\t\t\t0,\t0,\t0, \t-l,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n                 \t0,\t0,\t0, \t-l,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n                \t0,\t0,\t0, \t-l,\t0,\n##\n##\t\t\t\t\t\t\t\t\t13+7\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \tl,\n                \t0,\t0,  0,\t0, \t-l,\n                \t0,\t0,  0,\t0, \t-l,\n                \t0,\t0,  0,\t0, \t-l,\n\t\t\t\t\t0,\t0,  0,\t0, \t-l,\n                \t0,\t0,  0,\t0, \t-l,\n\t\t\t\t\t0,\t0,  0,\t0, \t-l,\n                \t0,\t0,  0,\t0, \t-l\n),\n                 ncol=5,byrow=TRUE)\nreturn(Loadings)\n}\n\n\n#### Names\nIPIP_100_names<-c('E1',\n         'E2',\n         'E3',\n         'E4',\n         'E5',\n         'E6',\n         'E7',\n         'E8',\n\t\t 'E9',\n         'E10',\n\t\t 'E11R',\n         'E12R',\n         'E13R',\n         'E14R',\n         'E15R',\n         'E16R',\n         'E17R',\n         'E18R',\n\t\t 'E19R',\n         'E20R',\n         'A1',\n         'A2',\n         'A3',\n         'A4',\n         'A5',\n         'A6',\n         'A7',\n         'A8',\n         'A9',\n         'A10',\n\t\t 'A11',\n\t\t 'A12',\n\t\t 'A13',\n\t\t 'A14',\n         'A15R',\n         'A16R',\n         'A17R',\n         'A18R',\n         'A19R',\n         'A20R',\n         'C1',\n         'C2',\n         'C3',\n         'C4',\n         'C5',\n         'C6',\n         'C7',\n         'C8',\n         'C9',\n\t\t 'C10',\n         'C11',\n         'C12R',\n         'C13R',\n         'C14R',\n         'C15R',\n         'C16R',\n         'C17R',\n         'C18R',\n         'C19R',\n\t\t 'C20R',\n         'N1',\n         'N2',\n         'N3',\n         'N4',\n         'N5',\n         'N6R',\n         'N7R',\n         'N8R',\n\t\t 'N9R',\n\t\t 'N10R',\n         'N11R',\n         'N12R',\n         'N13R',\n         'N14R',\n         'N15R',\n         'N16R',\n         'N17R',\n         'N18R',\n\t\t 'N19R',\n\t\t 'N20R',\n         'O1',\n         'O2',\n         'O3',\n         'O4',\n         'O5',\n         'O6',\n         'O7',\n         'O8',\n\t\t 'O9',\n\t\t 'O10',\n         'O11',\n         'O12',\n         'O13',\n         'O14R',\n         'O15R',\n         'O16R',\n         'O17R',\n         'O18R',\n\t\t 'O19R',\n\t\t 'O20R'\n\t\t )\n#BFI\n## Gen Data\nfor(d in 1:simulation) {\n### Loadings\nfor(i in 1:length(Loadings)){\nfmodel=BFI_Data_Loadings(l=Loadings[i])\n\n### Correlated Factors\nfor(j in 1:length(FactorCor)){\nsmodel=Data_Structure_5(r=FactorCor[j])\n\n### Sample Size\nfor( k in 1:length(samplesize)){\ndata=GenData(fmodel=fmodel,effect=smodel,n=samplesize[k],names=BFI_names)\ncov<-cov(data)\nwrite.table(cov,file=paste0(\"F:/Work/Data Sets/FASim/BFI/\",d,\"_cov_l\",Loadings[i],\"_r\",FactorCor[j],\"_n\",samplesize[k],\".csv\"),row.names = FALSE,col.names=FALSE, sep=\",\")\n}\n}\n}\n}\n\n\n\n#IPIP_50\n## Simulation\nfor(d in 1:simulation) {\n  ### Loadings\n  for(i in 1:length(Loadings)){\n    fmodel=IPIP_50_Data_Loadings(l=Loadings[i])\n\n    ### Correlated Factors\n    for(j in 1:length(FactorCor)){\n      smodel=Data_Structure_5(r=FactorCor[j])\n\n      ### Sample Size\n      for( k in 1:length(samplesize)){\n        data=GenData(fmodel=fmodel,effect=smodel,n=samplesize[k],names=IPIP_50_names)\n        cov<-cov(data)\n        write.table(cov,file=paste0(\"F:/Work/Data Sets/FASim/IPIP50/\",d,\"_cov_l\",Loadings[i],\"_r\",FactorCor[j],\"_n\",samplesize[k],\".csv\"),row.names = FALSE,col.names=FALSE, sep=\",\")\n      }\n    }\n  }\n}\n\n#IPIP_100\n## Simulation\nfor(d in 1:simulation) {\n  ### Loadings\n  for(i in 1:length(Loadings)){\n    fmodel=IPIP_100_Data_Loadings(l=Loadings[i])\n\n    ### Correlated Factors\n    for(j in 1:length(FactorCor)){\n      smodel=Data_Structure_5(r=FactorCor[j])\n\n      ### Sample Size\n      for( k in 1:length(samplesize)){\n        data=GenData(fmodel=fmodel,effect=smodel,n=samplesize[k],names=IPIP_100_names)\n        cov<-cov(data)\n        write.table(cov,file=paste0(\"F:/Work/Data Sets/FASim/IPIP100/\",d,\"_cov_l\",Loadings[i],\"_r\",FactorCor[j],\"_n\",samplesize[k],\".csv\"),row.names = FALSE,col.names=FALSE, sep=\",\")\n\n      }\n    }\n  }\n}\n\nbeep()\n",
    "created" : 1497110966724.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1323845488",
    "id" : "6D1F41D1",
    "lastKnownWriteTime" : 1497112209,
    "last_content_update" : 1497112209142,
    "path" : "C:/Dropbox/Lab/Research/Projects/Current/enumR/FA Project/Common/content/analyses/r/simulation.R",
    "project_path" : "FA Project/Common/content/analyses/r/simulation.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}