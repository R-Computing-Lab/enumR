{
    "collab_server" : "",
    "contents" : "#' @title enumR simulation function\n#'\n#' @description This function simulates factor analyses based on numerous parameters, listed below.\n#'\n#' @param cor\tWhat kind of correlation to find, defaults to covariance matrix, but see fa for the choices\n#' @param effectmatrix  OPTIONAL matrix of item loadings by factor. If not provided, one is generated from \\code{items} and \\code{nfactors}.\n#' @param items_p_f  number of items per factor\n#' @param itemsR_p_f number of reverse-scored items per factor\n#' @param custom_item If TRUE, overrides \\code{items_p_f} and \\code{itemsR_p_f}. Primary used for importing from shiny interface.\n#'  @param items OPTIONAL vector of total number of items per factor\n#' @param loading Factor loading magnitude. Default is .5\n#' @param loading_norm If TRUE, generate factor loadings that average to \\code{loading}\n#' @param loading_norm_sd If \\code{loading_norm} is TRUE, standard deviation of loadings.\n#' @param method factoring method â€“ fm=\"pa\" Principal Axis Factor Analysis, fm = \"minres\" minimum residual (OLS) factoring fm=\"ml\" Maximum Likelihood FA, fm=\"pc\" Principal Components\"\n#' @param samplesize Number of observations\n#' @param ndatasets Number of datasets generated\n#' @param nfactors Number of factors to extract.\n#' @param patternmatrix OPTIONAL matrix of factor loadings. If not provided, one is generated from \\code{rfactors} and \\code{nfactors}.\n#' @param rfactors Intercorrelations between factors. Default is 0\n#' @param r_norm If TRUE, generate normally distributed factor loadings with  mean \\code{loading} and sd \\code{r_norm_sd}. Does not check if correlation matrix is positive definite.\n#' @param r_norm_sd If \\code{r_norm} is TRUE, standard deviation for normally distributed intercorrelations.\n#' @param itemsR Number of items per factor that are reverse scored\n#' @param rotation what rotation to use c(\"none\", \"varimax\", \"oblimin\",\"promax\")\n#' @param seed numeric value for setting a seed. Allows results to be reproduced.\n#' @param true_model If TRUE, Estimates model using \\code{nfactors} only. Is used in \\code{enumRsimulation} function. Default is FALSE.\n#' @param use\tIf doing covariances or Pearson R, should we use \"pairwise\" or \"complete cases\"\n#' @param  f1_items Total number of items on factor 1\n#' @param  f2_items Total number of items on factor 2\n#' @param  f3_items Total number of items on factor 3\n#' @param  f4_items Total number of items on factor 4\n#' @param  f5_items Total number of items on factor 5\n#' @param  f6_items Total number of items on factor 6\n#' @param  f7_items Total number of items on factor 7\n#' @param  f8_items Total number of items on factor 8\n#' @param  f9_items Total number of items on factor 9\n#' @param  f10_items Total number of items on factor 10\n#' @param  f1_itemsR Number of reverse-scored items on factor 1\n#' @param  f2_itemsR Number of reverse-scored items on factor 2\n#' @param  f3_itemsR Number of reverse-scored items on factor 3\n#' @param  f4_itemsR Number of reverse-scored items on factor 4\n#' @param  f5_itemsR Number of reverse-scored items on factor 5\n#' @param  f6_itemsR Number of reverse-scored items on factor 6\n#' @param  f7_itemsR Number of reverse-scored items on factor 7\n#' @param  f8_itemsR Number of reverse-scored items on factor 8\n#' @param  f9_itemsR Number of reverse-scored items on factor 9\n#' @param  f10_itemsR Number of reverse-scored items on factor 10\n#' ...\tparameters to pass to the factor analysis program The most important of these is if using a correlation matrix is covmat= xx\n#' @return dataframe\n\nenumRsimulation<-function(seed=12345,\n                ndatasets=200,\n                patternmatrix=NULL,\n                effectmatrix=NULL,\n                nfactors =5,\n                loading=.5,\n                items=NULL,\n                items_p_f=5,\n                itemsR_p_f=2,\n                itemsR=NULL,\n                loading_norm=FALSE,\n                loading_norm_sd=.05,\n                # effects matrix\n                rfactors=0,\n                r_norm =FALSE,\n                r_norm_SD =.015,\n                samplesize=300,\n                method=\"ml\",\n                rotation=\"oblimin\",\n                custom_item=FALSE,\n                f1_items=NULL,\n                f2_items = NULL,\n                f3_items = NULL,\n                f4_items = NULL,\n                f5_items = NULL,\n                f6_items = NULL,\n                f7_items = NULL,\n                f8_items = NULL,\n                f9_items = NULL,\n                f10_items = NULL,\n                f1_itemsR= NULL,\n                f2_itemsR = NULL,\n                f3_itemsR = NULL,\n                f4_itemsR = NULL,\n                f5_itemsR = NULL,\n                f6_itemsR = NULL,\n                f7_itemsR = NULL,\n                f8_itemsR = NULL,\n                f9_itemsR = NULL,\n                f10_itemsR = NULL\n                ){\n###prep\nset.seed(seed)\nrequire(psych)\nrequire(GPArotation)\nrequire(GAIPE)\n\nsimulation<-ndatasets\n\n# cleanup items\nif(is.null(items)){\nif(custom_item){\n  items=c(f1_items,\n          f2_items,\n          f3_items,\n          f4_items,\n          f5_items,\n          f6_items,\n          f7_items,\n          f8_items,\n          f9_items,\n          f10_items)\n\n  itemsR=c(f1_itemsR,\n          f2_itemsR,\n          f3_itemsR,\n          f4_itemsR,\n          f5_itemsR,\n          f6_itemsR,\n          f7_itemsR,\n          f8_itemsR,\n          f9_itemsR,\n          f10_itemsR)\n\n}else{\n  items=rep(items_p_f,nfactors)\n  itemsR=rep(itemsR_p_f,nfactors)\n}}\n\n\n\n\n\n## Results\nmeganames<-c( \"dof\",\"chisq\",\"prob\",\"sqresid\",\"fit\", \"RMSEA\",\"RMSEA_lower\",\"RMSEA_upper\",\"BIC\",\"SABIC\",\"null.model\",\"null.dof\",\"null.chisq\",\"complex\",\"eChisq\",\"SRMR\",\"eCRMS\",\"eBIC\",\"TLI\",\"fa.fit\",\"fa.fit.off\",\"objective\",\"ENull\",\"eSABIC\",\"null.chisq1\" , \"TLI.m\",\"NFI.m\",\"CFI.m\",\"RMSEA_lower.m\",\"RMSEA_upper.m\",\"eRMS\",\"cfit.1\",\"cfit.2\",\"cfit.3\",\"cfit.4\",\"cfit.5\",\"cfit.6\",\"cfit.7\",\"cfit.8\",\"cfit.9\",\"cresidual.1\",\"cresidual.2\",\"cresidual.3\",\"cresidual.4\",\"cresidual.5\",\"cresidual.6\",\"cresidual.7\",\"cresidual.8\",\"cresidual.9\",\"map.values\",\"rfactors\",\"samplesize\",\"loadings\",\"dataset\",\"error\",\"factor\")\nmega<-data.frame(matrix(rep(0,length(meganames)),nrow=1))\nnames(mega)=meganames\nmega_null<-mega\nmega_null$error<- 1\n\npercentiles<-data.frame(c(1))\nnames(percentiles)<-\"ds\"\n\n\nif(is.null(patternmatrix)){\n  fmodel=GenFactorMatrix(nfactors=nfactors, items= items[1:nfactors], itemsR=itemsR[1:nfactors], loading=loading,loading_norm=loading_norm,loading_norm_sd=loading_norm_sd)\n}else{fmodel=patternmatrix}\n  if(is.null(effectmatrix)){\n    smodel=GenStructure(nfactors=nfactors,rfactors=rfactors,r_norm=r_norm,r_norm_sd=r_norm_sd)\n    }else{smodel=effectmatrix}\n## Gen Data\nfor(d in 1:simulation) {\n        data=GenData(fmodel=fmodel,effect=smodel,samplesize=samplesize)\n        cov<-cov(data)\n        test<-\ttry(results<- enumR(cov,n=nfactors,samplesize=samplesize,covar=TRUE,truemodel = TRUE,fm = method), silent=TRUE)\n        if ('try-error' %in% class(test)) {mega[d,]<- mega_null\n        } else {mega[d,]<- results\n        mega$factor[d]<-nfactors\n        mega$error[d]<- 0\n        }\nmega$dataset[d]<-d\n\n        print(d)\n}\nmega$rfactors<-rfactors\nmega$samplesize<-samplesize\nmega$loadings<-loading\n\nds_true<-mega[mega$factor==nfactors,]\n\npercentiles$RMSEA_.95<-quantile(ds_true$RMSEA,.95)\npercentiles$MAP_.95<-quantile(ds_true$map.values,.95)\n#percentiles$chisq_.95<-quantile(ds_true$chisq,.95)\n#percentiles$BIC_.95<-quantile(ds_true$BIC,.95)\npercentiles$SRMR_.95<-quantile(ds_true$SRMR,.95)\n#percentiles$SABIC_.95<-quantile(ds_true$SABIC,.95)\n#percentiles$TLI_.95<-quantile(ds_true$TLI,.95)\npercentiles$chisq_sig_.95<-quantile(ds_true$prob,.95)\n#percentiles$RMSEA_.05<-quantile(ds_true$RMSEA,.05)\n#percentiles$MAP_.05<-quantile(ds_true$map.values,.05)\n#percentiles$chisq_.05<-quantile(ds_true$chisq,.05)\n#percentiles$BIC_.05<-quantile(ds_true$BIC,.05)\n#percentiles$SRMR_.05<-quantile(ds_true$SRMR,.05)\n#percentiles$SABIC_.05<-quantile(ds_true$SABIC,.05)\npercentiles$TLI_.05<-quantile(ds_true$TLI,.05)\npercentiles$chisq_sig_.05<-quantile(ds_true$prob,.05)\n\nreturn(list(percentiles,mega))\n}\n",
    "created" : 1497244035492.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1050931555",
    "id" : "89F3947F",
    "lastKnownWriteTime" : 1497405515,
    "last_content_update" : 1497405515,
    "path" : "E:/Dropbox/Lab/Research/Projects/Current/enumR/R/enumRsimulation.R",
    "project_path" : "R/enumRsimulation.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}